// Generated by gencpp from file locobot_simulation/Model.msg
// DO NOT EDIT!


#ifndef LOCOBOT_SIMULATION_MESSAGE_MODEL_H
#define LOCOBOT_SIMULATION_MESSAGE_MODEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace locobot_simulation
{
template <class ContainerAllocator>
struct Model_
{
  typedef Model_<ContainerAllocator> Type;

  Model_()
    : type()
    , pose()
    , size()
    , min()
    , max()  {
    }
  Model_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , pose(_alloc)
    , size(_alloc)
    , min(_alloc)
    , max(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _size_type;
  _size_type size;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _min_type;
  _min_type min;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _max_type;
  _max_type max;





  typedef boost::shared_ptr< ::locobot_simulation::Model_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::locobot_simulation::Model_<ContainerAllocator> const> ConstPtr;

}; // struct Model_

typedef ::locobot_simulation::Model_<std::allocator<void> > Model;

typedef boost::shared_ptr< ::locobot_simulation::Model > ModelPtr;
typedef boost::shared_ptr< ::locobot_simulation::Model const> ModelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::locobot_simulation::Model_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::locobot_simulation::Model_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::locobot_simulation::Model_<ContainerAllocator1> & lhs, const ::locobot_simulation::Model_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.pose == rhs.pose &&
    lhs.size == rhs.size &&
    lhs.min == rhs.min &&
    lhs.max == rhs.max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::locobot_simulation::Model_<ContainerAllocator1> & lhs, const ::locobot_simulation::Model_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace locobot_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::locobot_simulation::Model_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::locobot_simulation::Model_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locobot_simulation::Model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locobot_simulation::Model_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locobot_simulation::Model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locobot_simulation::Model_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::locobot_simulation::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7c9eb7753f1cda18cb3b02c2efc52ff";
  }

  static const char* value(const ::locobot_simulation::Model_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7c9eb7753f1cda1ULL;
  static const uint64_t static_value2 = 0x8cb3b02c2efc52ffULL;
};

template<class ContainerAllocator>
struct DataType< ::locobot_simulation::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "locobot_simulation/Model";
  }

  static const char* value(const ::locobot_simulation::Model_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::locobot_simulation::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Vector3 size\n"
"geometry_msgs/Vector3 min\n"
"geometry_msgs/Vector3 max\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::locobot_simulation::Model_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::locobot_simulation::Model_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.pose);
      stream.next(m.size);
      stream.next(m.min);
      stream.next(m.max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Model_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::locobot_simulation::Model_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::locobot_simulation::Model_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
    s << indent << "min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCOBOT_SIMULATION_MESSAGE_MODEL_H
