// Generated by gencpp from file locobot_simulation/DetectedObject.msg
// DO NOT EDIT!


#ifndef LOCOBOT_SIMULATION_MESSAGE_DETECTEDOBJECT_H
#define LOCOBOT_SIMULATION_MESSAGE_DETECTEDOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ColorRGBA.h>
#include <geometry_msgs/Point.h>

namespace locobot_simulation
{
template <class ContainerAllocator>
struct DetectedObject_
{
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
    : name()
    , label()
    , probability(0.0)
    , bbox()
    , color()
    , position()
    , num_points(0)  {
    }
  DetectedObject_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , label(_alloc)
    , probability(0.0)
    , bbox(_alloc)
    , color(_alloc)
    , position(_alloc)
    , num_points(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef double _probability_type;
  _probability_type probability;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _bbox_type;
  _bbox_type bbox;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef int32_t _num_points_type;
  _num_points_type num_points;





  typedef boost::shared_ptr< ::locobot_simulation::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::locobot_simulation::DetectedObject_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObject_

typedef ::locobot_simulation::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::locobot_simulation::DetectedObject > DetectedObjectPtr;
typedef boost::shared_ptr< ::locobot_simulation::DetectedObject const> DetectedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::locobot_simulation::DetectedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::locobot_simulation::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::locobot_simulation::DetectedObject_<ContainerAllocator1> & lhs, const ::locobot_simulation::DetectedObject_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.label == rhs.label &&
    lhs.probability == rhs.probability &&
    lhs.bbox == rhs.bbox &&
    lhs.color == rhs.color &&
    lhs.position == rhs.position &&
    lhs.num_points == rhs.num_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::locobot_simulation::DetectedObject_<ContainerAllocator1> & lhs, const ::locobot_simulation::DetectedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace locobot_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::locobot_simulation::DetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::locobot_simulation::DetectedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locobot_simulation::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locobot_simulation::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locobot_simulation::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locobot_simulation::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::locobot_simulation::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24b1559ff07fbef77b52a17ccdb9e43a";
  }

  static const char* value(const ::locobot_simulation::DetectedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24b1559ff07fbef7ULL;
  static const uint64_t static_value2 = 0x7b52a17ccdb9e43aULL;
};

template<class ContainerAllocator>
struct DataType< ::locobot_simulation::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "locobot_simulation/DetectedObject";
  }

  static const char* value(const ::locobot_simulation::DetectedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::locobot_simulation::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string label\n"
"float64 probability\n"
"int64[] bbox\n"
"std_msgs/ColorRGBA color\n"
"geometry_msgs/Point position\n"
"int32 num_points\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::locobot_simulation::DetectedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::locobot_simulation::DetectedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.label);
      stream.next(m.probability);
      stream.next(m.bbox);
      stream.next(m.color);
      stream.next(m.position);
      stream.next(m.num_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::locobot_simulation::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::locobot_simulation::DetectedObject_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
    s << indent << "bbox[]" << std::endl;
    for (size_t i = 0; i < v.bbox.size(); ++i)
    {
      s << indent << "  bbox[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.bbox[i]);
    }
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "num_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_points);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCOBOT_SIMULATION_MESSAGE_DETECTEDOBJECT_H
